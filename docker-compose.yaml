services:
  cdc-client:
   build:
     context: ./cdc-client
     dockerfile: Dockerfile
     args:
       DEBEZIUM_VERSION: ${DEBEZIUM_VERSION:-2.7.4.Final}
       APICURIO_VERSION: ${APICURIO_VERSION:-2.6.1.Final}
       CONFLUENT_VERSION: ${CONFLUENT_VERSION:-7.8.1}
       AVRO_VERSION: ${AVRO_VERSION:-1.12.0}
       GUAVA_VERSION: ${GUAVA_VERSION:-33.4.0-jre}
   restart: always
   environment:
      JAVA_OPTIONS: "-Djava.util.logging.manager=org.jboss.logmanager.LogManager"
      QUARKUS_LOG_LEVEL: INFO
      LOG_LEVEL: INFO
   ports:
     - "8082:8081"
   volumes:
     - offsets:/var/offsets
     - ./cdc-client/${PROPERTIES_TEMPLATE:-kafka-confluent-avro}.properties.template:/opt/debezium/conf/application.properties.template
     - ${GOOGLE_APPLICATION_CREDENTIALS}:/opt/debezium/credentials.json
   depends_on:
     - postgres-db
     - apicurio-registry
     - confluent-registry

  apicurio-registry:
    image: apicurio/apicurio-registry-sql:${APICURIO_VERSION:-2.6.1.Final}
    environment:
      REGISTRY_DATASOURCE_URL: jdbc:postgresql://postgres-db:5432/registry
      REGISTRY_DATASOURCE_USERNAME: registry
      REGISTRY_DATASOURCE_PASSWORD: s3cr3tp4ss
      REGISTRY_APIS_V2_DATE_FORMAT: yyyy-MM-dd'T'HH:mm:ss'Z'
      JAVA_OPTIONS: "-XX:MaxRAMPercentage=80.0 -XX:+UseParallelGC -XX:MinHeapFreeRatio=10 -XX:MaxHeapFreeRatio=20 -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90 -XX:+ExitOnOutOfMemoryError -Dquarkus.http.host=0.0.0.0 -Djava.util.logging.manager=org.jboss.logmanager.LogManager"
      QUARKUS_LOG_LEVEL: INFO
      LOG_LEVEL: INFO
    ports:
      - "8080:8080"
    depends_on:
      - postgres-db

  kafka:
    image: confluentinc/cp-kafka:${CONFLUENT_VERSION:-7.8.1}
    ports:
      - "9092:9092"
      - "9093:9093"  # Internal listener
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: controller,broker
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
      KAFKA_LISTENERS: PLAINTEXT://kafka:9092,CONTROLLER://kafka:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      CLUSTER_ID: local
    volumes:
      - kafka-data:/var/lib/kafka/data

  confluent-registry:
    image: confluentinc/cp-schema-registry:${CONFLUENT_VERSION:-7.8.1}
    restart: always
    depends_on:
      - kafka
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "PLAINTEXT://kafka:9092"
      SCHEMA_REGISTRY_HOST_NAME: "confluent-registry"
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081/

  postgres-db:
    image: postgres:${POSTGRES_VERSION:-15.7-alpine}
    command: ["-c", "config_file=/etc/postgresql/postgresql.conf"]
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-postgres}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-mypassword}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./postgres-db/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./postgres-db/${INIT_SQL:-init.sql}:/docker-entrypoint-initdb.d/init.sql

volumes:
  pgdata: {}
  offsets: {}
  kafka-data: {}